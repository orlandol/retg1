
program <-
  _ programDeclaration
    (_ globalDeclaration)*
  _ runBlock
    (_ globalDeclaration)*
  _ eof

programDeclaration <-
  _ 'program' _ <IDENT> {
    printf( "[L%u] PROGRAM: '%s'\n", auxil->line, $1 );
  }

#
# Qualified identifier grammar parses each component in the correct order
#
#qident <-
#  qident _ '.' _ <IDENT> {
#    printf( "QIDENT: '%s'\n", $1 );
#  }
#/ <IDENT> {
#    printf( "QIDENT: '%s'\n", $2 );
#  }

runBlock <-
  'run'
    (_ localVarBlock)*
    (_ !'end' TYPEDBLOCKSTATEMENT)*
  _ 'end'

TYPESPEC <-
  ('@' / '#') _ <TYPENAME> _ '[' _ ']' {
  }
/ ('@' / '#') _ <TYPENAME> _ '[' _ CONSTINDEXEXPR _ ']' {
  }
/ ('@' / '#') _ <TYPENAME> {
  }
/ <TYPENAME> _ '[' _ CONSTINDEXEXPR _ ']' {
  }
/ <TYPENAME>

TYPENAME <- (BASICTYPE / IDENT)

CONSTINDEXEXPR <-
  CONSTINDEXINT

CONSTINDEXINT <-
  '0b'<[_0-1]+> {
    printf( "  [BININT: %s]\n", $1 );
  }
/ '0o'<[_0-7]+> {
    printf( "  [OCTINT: %s]\n", $2 );
  }
/ '0x'<[_0-9a-fA-F]+> {
    printf( "  [HEXINT: %s]\n", $3 );
  }
/ <[_0-9]+> {
    printf( "  [INTEGER: %s]\n", $4 );
  }

globalDeclaration <-
  constDeclaration
/ enumBlock
/ typeAliasDeclaration
/ structBlock
/ unionBlock
/ globalVarBlock
/ funcImport
/ funcDeclaration
/ funcBlock
/ objectBlock
/ objectConstructorBlock
/ objectDestructorBlock
/ interfaceBlock
/ methodBlock

constDeclaration <-
  'const' _ BASICTYPE _ <IDENT> _ '=' _ CONSTINIT {
    printf( "CONST: '%s'\n", $1 );
  }

enumBlock <-
  enumDeclaration
  (_ !'end' enumFieldDeclaration)*
  _ 'end'

enumDeclaration <-
  'enum' _ BASICTYPE _ <IDENT> {
    printf( "ENUM: '%s'\n", $1 );
  }

enumFieldDeclaration <-
  enumFieldDeclaration _ ',' _ enumFieldDeclaration
/ enumSingleFieldAssignment
/ enumSingleFieldDeclaration

enumSingleFieldAssignment <-
  <IDENT> _ '=' _ CONSTEXPR {
    printf( "ENUMFIELD: '%s'\n", $1 );
  }

enumSingleFieldDeclaration <-
  <IDENT> {
    printf( "ENUMFIELD: '%s'\n", $1 );
  }

typeAliasDeclaration <-
  'type' _ (!reservedWord TYPESPEC) _ <IDENT> {
    printf( "TYPE: '%s'\n", $1 );
  }
/ 'type' _ <IDENT> {
    printf( "TYPE: '%s'\n", $2 );
  }

structBlock <-
  structDeclaration
  (_ structInherits)*
  (_ !'end' structFieldDeclaration)*
  _ 'end' {
  }

structDeclaration <-
  'struct' _ 'packed'? _ <IDENT> {
    printf( "STRUCT: '%s'\n", $1 );
  }

structInherits <-
  'inherits' _ structInheritsName (_ ',' _ structInheritsName)*

structInheritsName <-
  <IDENT> {
    printf( "  STRUCTINHERITS: '%s'\n", $1 );
  }

structFieldDeclaration <-
  structNestedStructBlockField
/ structNestedUnionFieldDeclaration
/ TYPESPEC _ <IDENT> {
    printf( "  STRUCTFIELD: '%s'\n", $1 );
  }
/ ',' _ <IDENT> {
    printf( "  STRUCTFIELD: '%s'\n", $2 );
  }

structNestedStructBlockField <-
  structNestedStructDeclarationField
  (_ !'end' structNestedStructNestedFieldDeclaration)*
  _ 'end'

structNestedStructDeclarationField <-
  'struct' _ <IDENT> {
    printf( "  STRUCTNESTEDSTRUCTFIELD: '%s'\n", $1 );
  }

structNestedStructNestedFieldDeclaration <-
  TYPESPEC _ <IDENT> {
    printf( "    STRUCTNESTEDSTRUCTNESTEDFIELD: '%s'\n", $1 );
  }
/ ',' _ <IDENT> {
    printf( "    STRUCTNESTEDSTRUCTNESTEDFIELD: '%s'\n", $2 );
  }
/ structNestedStructNestedFieldDeclaration

structNestedUnionFieldDeclaration <-
  structNestedUnionFieldDeclareName _ '(' (_ structNestedUnionType)+ _ ')'

structNestedUnionFieldDeclareName <-
  'union' _ <IDENT> {
    printf( "  STRUCTNESTEDUNIONFIELD: '%s'\n", $1 );
  }

structNestedUnionType <-
  <TYPESPEC> {
    printf( "    STRUCTNESTEDUNIONFIELDTYPE: '%s'\n", $1 );
  }
/ ',' _ <TYPESPEC> {
    printf( "    STRUCTNESTEDUNIONFIELDTYPE: '%s'\n", $2 );
  }

unionBlock <-
  unionDeclaration
  (_ unionInherits)*
  (_ !'end' unionFieldDeclaration)*
  _ 'end' {
  }

unionDeclaration <-
  'union' _ 'packed'? _ <IDENT> {
    printf( "UNION: '%s'\n", $1 );
  }

unionInherits <-
  'inherits' _ unionInheritsName (_ ',' _ unionInheritsName)*

unionInheritsName <-
  <IDENT> {
    printf( "  UNIONINHERITS: '%s'\n", $1 );
  }

unionFieldDeclaration <-
  unionNestedStructBlockField
/ unionNestedUnionFieldDeclaration
/ TYPESPEC _ <IDENT> {
    printf( "  UNIONFIELD: '%s'\n", $1 );
  }
/ ',' _ <IDENT> {
    printf( "  UNIONFIELD: '%s'\n", $2 );
  }

unionNestedStructBlockField <-
  unionNestedStructDeclarationField
  (_ !'end' unionNestedStructNestedFieldDeclaration)*
  _ 'end'

unionNestedStructDeclarationField <-
  'struct' _ <IDENT> {
    printf( "  UNIONNESTEDSTRUCTFIELD: '%s'\n", $1 );
  }

unionNestedStructNestedFieldDeclaration <-
  TYPESPEC _ <IDENT> {
    printf( "    UNIONNESTEDSTRUCTNESTEDFIELD: '%s'\n", $1 );
  }
/ ',' _ <IDENT> {
    printf( "    UNIONNESTEDSTRUCTNESTEDFIELD: '%s'\n", $2 );
  }
/ unionNestedStructNestedFieldDeclaration

unionNestedUnionFieldDeclaration <-
  unionNestedUnionFieldDeclareName _ '(' (_ unionNestedUnionType)+ _ ')'

unionNestedUnionFieldDeclareName <-
  'union' _ <IDENT> {
    printf( "  UNIONNESTEDUNIONFIELD: '%s'\n", $1 );
  }

unionNestedUnionType <-
  <TYPESPEC> {
    printf( "    UNIONNESTEDUNIONFIELDTYPE: '%s'\n", $1 );
  }
/ ',' _ <TYPESPEC> {
    printf( "    UNIONNESTEDUNIONFIELDTYPE: '%s'\n", $2 );
  }

globalVarBlock <-
  'var'
  (_ !'end' globalVarDeclaration)*
  _ 'end'

globalVarDeclaration <-
  TYPESPEC _ VARIDENT _ (',' _ VARIDENT _)*

funcParamDeclarations <-
  TYPESPEC _ (!reservedWord <IDENT>) (_ ',' _ funcParamDeclarations)* {
    printf( "  FUNCPARAM: '%s'\n", $1 );
  }

funcImport <-
  'func' _ 'import' _ CALLSPEC _ <IDENT> {
    printf( "FUNCIMPORT: '%s'\n", $1 );
  }
  _ '(' _ funcParamDeclarations? _ ')'
  _ funcImportFrom _ funcImportLinkAs
/ 'func' _ 'import' _ TYPESPEC _ CALLSPEC _ <IDENT> {
    printf( "FUNCIMPORT: '%s'\n", $2 );
  }
  _ '(' _ funcParamDeclarations? _ ')'
  _ funcImportFrom _ funcImportLinkAs

funcImportFrom <- ('from' _ <FILENAME>)?

funcImportLinkAs <- ('as' _ <LINKNAME>)?

FILENAME <- STRING

LINKNAME <- STRING

funcDeclaration <-
  'func' _ 'declare' _ CALLSPEC _ <IDENT> {
    printf( "FUNCDECL: '%s'\n", $1 );
  }
  _ '(' _ funcParamDeclarations? _ ')'
/ 'func' _ 'declare' _ TYPESPEC _ CALLSPEC _ <IDENT> {
    printf( "FUNCDECL: '%s'\n", $2 );
  }
  _ '(' _ funcParamDeclarations? _ ')'

funcBlock <-
  'func' _ CALLSPEC _ FUNCSPEC _ <IDENT> _ '(' _ funcParamDeclarations? _ ')'
    (_ localVarBlock)*
    (_ UNTYPEDBLOCKSTATEMENT)*
  _ 'end'
/ 'func' _ TYPESPEC _ CALLSPEC _ FUNCSPEC _ <IDENT> _ '(' _ funcParamDeclarations? _ ')'
    (_ localVarBlock)*
    (_ TYPEDBLOCKSTATEMENT)*
  _ 'end'

objectBlock <-
  objectDeclaration
  (_ objectInherits)*
  (_ !'end' objectMemberDeclaration)*
  _ 'end' {
  }

objectDeclaration <-
  'object' _ 'packed'? _ <IDENT> {
    printf( "OBJECT: '%s'\n", $1 );
  }

objectInherits <-
  'inherits' _ objectInheritsName (_ ',' _ objectInheritsName)*

objectInheritsName <-
  <IDENT> {
    printf( "  OBJECTINHERITS: '%s'\n", $1 );
  }

objectMemberDeclaration <-
  objectNestedStructBlockField
/ objectNestedUnionFieldDeclaration
/ TYPESPEC _ <IDENT> {
    printf( "  OBJECTMEMBER: '%s'\n", $1 );
  }
/ ',' _ <IDENT> {
    printf( "  OBJECTMEMBER: '%s'\n", $2 );
  }

objectNestedStructBlockField <-
  objectNestedStructDeclarationField
  (_ !'end' objectNestedStructNestedFieldDeclaration)*
  _ 'end'

objectNestedStructDeclarationField <-
  'struct' _ <IDENT> {
    printf( "  OBJECTNESTEDSTRUCTFIELD: '%s'\n", $1 );
  }

objectNestedStructNestedFieldDeclaration <-
  TYPESPEC _ <IDENT> {
    printf( "    OBJECTNESTEDSTRUCTNESTEDFIELD: '%s'\n", $1 );
  }
/ ',' _ <IDENT> {
    printf( "    OBJECTNESTEDSTRUCTNESTEDFIELD: '%s'\n", $2 );
  }
/ objectNestedStructNestedFieldDeclaration

objectNestedUnionFieldDeclaration <-
  objectNestedUnionFieldDeclareName _ '(' (_ objectNestedUnionType)+ _ ')'

objectNestedUnionFieldDeclareName <-
  'union' _ <IDENT> {
    printf( "  OBJECTNESTEDUNIONFIELD: '%s'\n", $1 );
  }

objectNestedUnionType <-
  <TYPESPEC> {
    printf( "    OBJECTNESTEDUNIONFIELDTYPE: '%s'\n", $1 );
  }
/ ',' _ <TYPESPEC> {
    printf( "    OBJECTNESTEDUNIONFIELDTYPE: '%s'\n", $2 );
  }

constructorParamDeclarations <-
  qualifiedObjectMember (_ ',' _ constructorParamDeclarations)*

qualifiedObjectMember <-
  qualifiedObjectMember _ '.' _ <IDENT> {
  }
/ <IDENT> {
  }

objectConstructorBlock <-
  'constructor' _ CALLSPEC _ FUNCSPEC _ <IDENT> _ '(' _ constructorParamDeclarations? _ ')'
    (_ localVarBlock)*
    (_ UNTYPEDBLOCKSTATEMENT)*
  _ 'end'

objectDestructorBlock <-
  'destructor' _ CALLSPEC _ FUNCSPEC _ <IDENT> _ '(' _ ')'
    (_ localVarBlock)*
    (_ UNTYPEDBLOCKSTATEMENT)*
  _ 'end'

methodParamDeclarations <-
  TYPESPEC _ (!reservedWord <IDENT>) (_ ',' _ methodParamDeclarations)* {
    printf( "  METHODPARAM: '%s'\n", $1 );
  }

interfaceBlock <-
  interfaceDeclaration
  (_ interfaceImplements)*
  (_ interfaceInherits)*
  (_ interfaceMethodDeclaration)*
  _ 'end'

interfaceDeclaration <-
  'interface' _ <IDENT> {
    printf( "INTERFACE: '%s'\n", $1 );
  }

interfaceImplements <-
  'implements' _ interfaceImplementsName (_ ',' _ interfaceImplementsName)*

interfaceImplementsName <-
  <IDENT> {
    printf( "  INTERFACEIMPLEMENTS: '%s'\n", $1 );
  }

interfaceInherits <-
  'inherits' _ interfaceInheritsName (_ ',' _ interfaceInheritsName)*

interfaceInheritsName <-
  <IDENT> {
    printf( "  INTERFACEINHERITS: '%s'\n", $1 );
  }

interfaceMethodDeclaration <-
  'method' _ CALLSPEC _ <IDENT> _ '(' _ methodParamDeclarations? _ ')' {
    printf( "  INTERFACEMETHOD: '%s'\n", $1 );
  }
/ 'method' _ TYPESPEC _ CALLSPEC _ <IDENT> _ '(' _ methodParamDeclarations? _ ')' {
    printf( "  INTERFACEMETHOD: '%s'\n", $2 );
  }

methodBlock <-
  'method' _ CALLSPEC _ FUNCSPEC _ <IDENT> _ '.' _ <IDENT> _ '(' _ methodParamDeclarations? _ ')'
    (_ localVarBlock)*
    (_ UNTYPEDBLOCKSTATEMENT)*
  _ 'end' {
      printf( "METHOD: '%s.%s'\n", $1, $2 );
    }
/ 'method' _ TYPESPEC _ CALLSPEC _ FUNCSPEC _ <IDENT> _ '.' _ <IDENT> _ '(' _ methodParamDeclarations? _ ')'
    (_ localVarBlock)*
    (_ TYPEDBLOCKSTATEMENT)*
  _ 'end' {
      printf( "METHOD: '%s.%s'\n", $3, $4 );
    }

STRING <- DOUBLEQUOTESTRING / SINGLEQUOTESTRING

DOUBLEQUOTESTRING <- '"' (!'"' .)* '"'

SINGLEQUOTESTRING <- "'" (!"'" .)* "'"

FUNCSPEC <- ('asm')? _ ('noframe')?

CALLSPEC <- ('cdecl' / 'stdcall')?

localVarBlock <-
  'var'
  (_ !'end' localVarDeclaration)*
  _ 'end'

localVarDeclaration <-
  TYPESPEC _ VARIDENT _ (',' _ VARIDENT _)*

VARIDENT <-
  reservedWord {
    printf( "Reserved word declared on line %u\n", auxil->line );
    exit( 1 );
  }
/ <IDENT> {
    printf( "VARIDENT: '%s'\n", $1 );
  }

reservedWord <-
  'program' / 'uses' / 'const' / 'enum' / 'newtype' / 'type' / 'var'
  / 'func' / 'asm' / 'noframe' / 'object' / 'interface' / 'inherits'
  / 'implements' / 'constructor' / 'destructor' / 'method' / 'run' / 'end'
  / 'if' / 'then' / 'elseif' / 'else' / 'endif' / 'goto'
  / 'for' / 'to' / 'downto' / 'foreach' / 'in' / 'next'
# / ...

UNTYPEDBLOCKSTATEMENT <-
  untypedReturn
/ untypedIfBlock
/ untypedWhileBlock
/ untypedRepeatBlock
/ gotoStatement
/ labelDeclaration _ UNTYPEDBLOCKSTATEMENT

UNTYPEDBLOCKLOOPSTATEMENT <-
  loopBreak
/ loopNext
/ untypedReturn
/ untypedLoopIfBlock
/ untypedWhileBlock
/ untypedRepeatBlock
/ gotoStatement
/ labelDeclaration _ UNTYPEDBLOCKLOOPSTATEMENT

untypedReturn <-
  'return' {
    printf( "  RETURN\n" );
  }

untypedIfBlock <-
  'if' _ CONDITION
    _ 'then' _ UNTYPEDBLOCKSTATEMENT
/ 'if' _ CONDITION _ !'then'
    (_ !'elseif' !'else' !'endif' UNTYPEDBLOCKSTATEMENT)*
  (_ 'elseif' _ CONDITION
    (_ !'else' !'endif' UNTYPEDBLOCKSTATEMENT)*
  )*
  (_ 'else'
    (_ !'endif' UNTYPEDBLOCKSTATEMENT)*
  )?
  _ 'endif'

untypedLoopIfBlock <-
  'if' _ CONDITION
    _ 'then' _ UNTYPEDBLOCKLOOPSTATEMENT
/ 'if' _ CONDITION _ !'then'
    (_ !'elseif' !'else' !'endif' UNTYPEDBLOCKLOOPSTATEMENT)*
  (_ 'elseif' _ CONDITION
    (_ !'else' !'endif' UNTYPEDBLOCKLOOPSTATEMENT)*
  )*
  (_ 'else'
    (_ !'endif' UNTYPEDBLOCKLOOPSTATEMENT)*
  )?
  _ 'endif'

untypedWhileBlock <-
  (<IDENT> _ ':' _ 'while' _ CONDITION {
    printf( "  WHILE: '%s'\n", $1 );
  }
  / 'while' _ CONDITION {
      printf( "  WHILE\n" );
    }
  )
    (_ !'endwhile' UNTYPEDBLOCKLOOPSTATEMENT)*
 _ 'endwhile' {
    printf( "  ENDWHILE\n" );
  }

untypedRepeatBlock <-
  (<IDENT> _ ':' _ 'repeat' {
    printf( "  REPEAT: '%s'\n", $1 );
  }
  / 'repeat' {
      printf( "  REPEAT\n" );
    }
  )
    (_ !'when' UNTYPEDBLOCKLOOPSTATEMENT)*
 _ 'when' _ CONDITION {
    printf( "  WHEN\n" );
  }

TYPEDBLOCKSTATEMENT <-
  typedReturn
/ typedIfBlock
/ typedWhileBlock
/ typedRepeatBlock
/ gotoStatement
/ labelDeclaration _ TYPEDBLOCKSTATEMENT

TYPEDBLOCKLOOPSTATEMENT <-
  loopBreak
/ loopNext
/ typedReturn
/ typedLoopIfBlock
/ typedWhileBlock
/ typedRepeatBlock
/ gotoStatement
/ labelDeclaration _ TYPEDBLOCKLOOPSTATEMENT

typedReturn <-
  'return' _ EXPR {
    printf( "  RETURN EXPR\n" );
  }

typedIfBlock <-
  'if' _ CONDITION
    _ 'then' _ TYPEDBLOCKSTATEMENT
/ 'if' _ CONDITION _ !'then'
    (_ !'elseif' !'else' !'endif' TYPEDBLOCKSTATEMENT)*
  (_ 'elseif' _ CONDITION
    (_ !'else' !'endif' TYPEDBLOCKSTATEMENT)*
  )*
  (_ 'else'
    (_ !'endif' TYPEDBLOCKSTATEMENT)*
  )?
  _ 'endif'

typedLoopIfBlock <-
  'if' _ CONDITION
    _ 'then' _ TYPEDBLOCKLOOPSTATEMENT
/ 'if' _ CONDITION _ !'then'
    (_ !'elseif' !'else' !'endif' TYPEDBLOCKLOOPSTATEMENT)*
  (_ 'elseif' _ CONDITION
    (_ !'else' !'endif' TYPEDBLOCKLOOPSTATEMENT)*
  )*
  (_ 'else'
    (_ !'endif' TYPEDBLOCKLOOPSTATEMENT)*
  )?
  _ 'endif'

typedWhileBlock <-
  (<IDENT> _ ':' _ 'while' _ CONDITION {
    printf( "  WHILE: '%s'\n", $1 );
  }
  / 'while' _ CONDITION {
      printf( "  WHILE\n" );
    }
  )
  (_ !'endwhile' TYPEDBLOCKLOOPSTATEMENT)*
  _ 'endwhile' {
    printf( "  ENDWHILE\n" );
  }

typedRepeatBlock <-
  (<IDENT> _ ':' _ 'repeat' {
    printf( "  REPEAT: '%s'\n", $1 );
  }
  / 'repeat' {
      printf( "  REPEAT\n" );
    }
  )
    (_ !'when' TYPEDBLOCKLOOPSTATEMENT)*
 _ 'when' _ CONDITION {
    printf( "  WHEN\n" );
  }

gotoStatement <-
  'goto' _ <IDENT> {
    printf( "  GOTO: '%s'\n", $1 );
  }

labelDeclaration <-
  <IDENT> _ ':' {
    printf( "  LABEL: '%s'\n", $1 );
  }

loopBreak <-
  'break' (_ !reservedWord <IDENT>)? {
    printf( "  BREAK: '%s'\n", $1 );
  }

loopNext <-
  'next' (_ !reservedWord <IDENT>)? {
    printf( "  NEXT: '%s'\n", $1 );
  }

CONDITION <-
  (CONSTINT / IDENT) _ '==' _ (CONSTINT / IDENT)

BASICTYPE <- ('int' / 'uint' / 'char' / 'bool')

CONSTINIT <-
  '[' _ CONSTEXPR (_ ',' _ CONSTEXPR)* _ ']' {
    printf( "  = [array]\n" );
  }
/ CONSTEXPR

CONSTEXPR <-
  CONSTINT / IDENT

CONSTINT <-
  '0b'<[_0-1]+> {
    printf( "  = BININT: %s\n", $1 );
  }
/ '0o'<[_0-7]+> {
    printf( "  = OCTINT: %s\n", $2 );
  }
/ '0x'<[_0-9a-fA-F]+> {
    printf( "  = HEXINT: %s\n", $3 );
  }
/ <[_0-9]+> {
    printf( "  = INTEGER: %s\n", $4 );
  }

EXPR <-
  INTNUM / IDENT

INTNUM <-
  '0b'<[_0-1]+> {
    printf( "  = BININT: %s\n", $1 );
  }
/ '0o'<[_0-7]+> {
    printf( "  = OCTINT: %s\n", $2 );
  }
/ '0x'<[_0-9a-fA-F]+> {
    printf( "  = HEXINT: %s\n", $3 );
  }
/ <[_0-9]+> {
    printf( "  = INTEGER: %s\n", $4 );
  }

IDENT <- [_a-zA-Z][_a-zA-Z0-9]*

IDENTNAME <- !reservedWord IDENT

_ <- (space / eol / singleLineComment / multiLineComment)*

singleLineComment <-
  '//' (!eol !eof .)* (eol / eof)

# Rule adapted from:
# https://stackoverflow.com/questions/28419972/how-do-you-parse-nested-comments-in-pegjs
multiLineComment <-
  '/*' ((!'/*' !'*/' (eol / .)) / multiLineComment)* '*/'

space <- [ \t]

eol <- ('\r\n' / '\r' / '\n') {
  auxil->line++;
}

eof <- !.

%header {
  /// Begin parse state auxil declarations
  typedef struct SourceFile {
    FILE* handle;
  } SourceFile;

  typedef struct ParseState {
    SourceFile source;
    unsigned line;
    unsigned errLine;
  } ParseState;
  // End parse state auxil declarations
}

%auxil "ParseState*"

%source {
  // begin strnlen copied from packcc.c source file, as a workaround for TinyCC
  #ifdef __TINYC__
  static size_t strnlen(const char *str, size_t maxlen) {
    size_t i;
    for( i = 0; (i < maxlen) && str[i]; i++ ) {
    };
    return i;
  }
  #endif
  // end strnlen

/*
  static const char *dbg_str[] = { "Evaluating rule", "Matched rule", "Abandoning rule" };
  #define PCC_DEBUG(event, rule, level, pos, buffer, length) \
      fprintf(stderr, "%*s%s %s @%d [%.*s]\n", level * 2, "", dbg_str[event], rule, pos, length, buffer);
*/

  /// Begin PCC_GETCHAR override
  int ReadChar( ParseState* auxil ) {
    int result = EOF;
    if( auxil && auxil->source.handle ) {
      result = fgetc(auxil->source.handle);
    }
    if( result == '\n' ) {
      auxil->errLine++;
    }
    return result;
  }
  #define PCC_GETCHAR(auxil) ReadChar(auxil);
  // End PCC_GETCHAR override

  /// Begin PCC_ERROR override
  void SyntaxError( ParseState* auxil ) {
    printf( "Syntax error on line %u\n", auxil->errLine );
    exit( 1 );
  }
  #define PCC_ERROR(auxil) SyntaxError(auxil)
  // End PCC_ERROR override

}

%%

ParseState parseState = {NULL, 1, 1};

int main( int argc, char* argv[] ) {
  pcc_context_t *ctx = pcc_create(&parseState);

  parseState.source.handle = fopen(argv[1], "r");

  while( pcc_parse(ctx, NULL) ) {
  };

  pcc_destroy( ctx );

  fclose( parseState.source.handle );
  parseState.source.handle = NULL;

  return 0;
}
