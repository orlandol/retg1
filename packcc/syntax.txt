================================

  // Single-line comment

  /* Multi-line
    /* nested */ comment */

program PROGRAMNAME

  const TYPESPEC CONSTNAME '=' CONSTINIT

  enum BASETYPE ENUMNAME
    FIELDNAME ['=' CONSTEXPR] [',' ...]
    [...]
  end

  type (TYPESPEC | FUNCSPEC | METHODSPEC) TYPEALIAS

  struct STRUCTNAME [inherits STRUCTNAME [',' ...]]
    TYPESPEC FIELDNAME [',' ...]
    union FIELDNAME '(' TYPESPEC [',' ...] ')'
    struct FIELDNAME [inherits (STRUCTNAME | UNIONNAME) [',' ...]]
    [...]
  end

  union UNIONNAME [inherits STRUCTNAME [',' ...]]
    TYPESPEC FIELDNAME [',' ...]
    union FIELDNAME '(' TYPESPEC [',' ...] ')'
    struct FIELDNAME [inherits (STRUCTNAME | UNIONNAME) [',' ...]]
    [...]
  end

  var
    TYPESPEC GLOBALVARNAME ['=' CONSTINIT] [',' ...]
    [...]
  end

  func import FUNCSPEC FUNCNAME '(' [TYPESPEC PARAMNAME [',' ...]] ')'
    from FILENAME [linkas LINKNAME]

  func declare FUNCSPEC FUNCNAME '(' [TYPESPEC PARAMNAME [',' ...]] ')'

  func _FUNCSPEC_ FUNCNAME '(' [TYPESPEC PARAMNAME [',' ...]] ')'
    var
      TYPESPEC LOCALVARNAME ['=' LOCALINIT] [',' ...]
    end
    [...]

    (STATEMENT | return _EXPR_)
    [...]
  end

  object OBJECTNAME [inherits (OBJECTNAME | STRUCTNAME | UNIONNAME) [',' ...]]
    TYPESPEC MEMBERNAME [',' ...]
    [...]
  end

  constructor OBJECTNAME '(' [MEMBERNAME [',' ...]] ')'
    var
      TYPESPEC LOCALVARNAME ['=' LOCALINIT] [',' ...]
    end
    [...]

    (STATEMENT | return)
    [...]
  end

  destructor OBJECTNAME '(' ')'
    var
      TYPESPEC LOCALVARNAME ['=' LOCALINIT] [',' ...]
    end
    [...]

    (STATEMENT | return)
    [...]
  end

  interface INTERFACENAME
    implements OBJECTNAME [',' ...]
    [...]

    inherits (INTERFACENAME | METHODNAME) [',' ...]
    [...]

    method METHODSPEC METHODNAME '(' [TYPESPEC PARAMNAME [',' ...]] ')'
    [...]
  end

  method _METHODSPEC_ OBJECTNAME '.' METHODNAME '(' [TYPESPEC PARAMNAME [',' ...]] ')'
    var
      TYPESPEC LOCALVARNAME ['=' LOCALINIT] [',' ...]
    end
    [...]

    (STATEMENT | return _EXPR_)
    [...]
  end

  operator TYPESPEC OP TYPESPEC
    [OPSTATEMENT]
    [...]
  end

run
  var
    TYPESPEC LOCALVARNAME ['=' LOCALINIT] [',' ...]
  end
  [...]

  (STATEMENT | return)
  [...]
end

  [...]

================================

TYPESPEC -> [@ | #] TYPENAME ['[' [CONSTEXPR [','...]] ']']

FUNCSPEC -> [FUNCCALLSPEC] [TYPESPEC]

METHODSPEC -> [METHODCALLSPEC] [TYPESPEC]

CONSTINIT -> CONSTARRAYINIT | CONSTEXPR

LOCALVARINIT -> ARRAYINIT | EXPR

FILENAME -> System file name string

LINKNAME -> Mangled name string

FIELDNAME -> IDENT

TYPENAME -> BASETYPE | STRUCTNAME | UNIONNAME | FUNCNAME | OBJECT '.' METHODNAME

================================

STATEMENT
-> LABELNAME ':'
-> goto LABELNAME
-> bind '(' OBJECTNAME ',' (INTERFACENAME | METHODNAME) [',' ...] ')'
-> if CONDITION then STATEMENT
-> if CONDITION
     STATEMENT
   elseif CONDITION
     STATEMENT
   else
     STATEMENT
   endif
-> [LABELNAME ':'] while CONDITION
     (STATEMENT | break [LABELNAME] | next [LABELNAME])
   endwhile
-> [LABELNAME ':'] repeat
     (STATEMENT | break [LABELNAME] | next [LABELNAME]
   when CONDITION
-> [LABELNAME ':'] for LOCALVARNAME '=' EXPR (to / downto) EXPR
     (STATEMENT | break [LABELNAME] | next [LABELNAME]
   endfor
-> [LABELNAME ':'] for LOCALVARNAME in '[' CONSTEXPR [',' ...] ']'
     (STATEMENT | break [LABELNAME] | next [LABELNAME])
   endfor
-> @VARNAME ASSIGNOP POINTEREXPR
-> METHODCALL
-> FUNCCALL
-> VARNAME ASSIGNOP EXPR
