
=========== language ================

// Single line comments

/* Multi-line
   comments */

/* Multi-line /* nested */
   comments */

program PROGNAME

callspec [x86_32] CALLSPECNAME
  {[align CONSTEXPR] |

  [parameters
    [align CONSTEXPR]
    [order (forward | reverse)]
    [stack (all | {CONSTEXPR {, CONSTEXPR}})]
    [cleanup (onreturn | caller)]
   end] |

  [prologue
    {ASSEMBLER_STATEMENT}
  end] |

  [epilogue
    {ASSEMBLER_STATEMENT}
  end]}
end

defaultcall CALLSPECNAME

enum ENUMNAME
  {ENUMFIELDNAME {, ENUMEFIELDNAME} ['=' CONSTEXPR]}
end

const TYPESPEC CONSTNAME = CONSTEXPR

newtype TYPESPEC TYPENAME

type TYPESPEC TYPEALIAS

union UNIONNAME
  {TYPESPEC UNIONFIELDNAME {, UNIONFIELDNAME}}
end

struct STRUCTNAME
  {TYPESPEC STRUCTFIELDNAME {, STRUCTFIELDNAME}}
end

var
  {TYPESPEC GLOBALVARNAME {, GLOBALVARNAME}}
end

import FUNCSPEC FUNCNAME '('
  [TYPESPEC PARAMNAME {, TYPESPEC PARAMNAME}] ')'
  from FILENAMESTRING [as FUNCALIAS]

funcdecl FUNCSPEC FUNCNAME '('
  [TYPESPEC PARAMNAME {, TYPESPEC PARAMNAME}] ')'

func FUNCSPEC FUNCNAME '('
  [TYPESPEC PARAMNAME {, TYPESPEC PARAMNAME}] ')'
  {var
    {TYPESPEC LOCALVARNAME {, LOCALVARNAME}}
  end}

  {STATEMENT | return [EXPR]}
end

object OBJECTNAME [inherits OBJECTNAME {, OBJECTNAME}]
  {[mutable | immutable] |
  TYPESPEC MEMBERNAME {, MEMBERNAME} ['=' CONSTEXPR]}
end

constructor OBJECTNAME
  {var
    {TYPESPEC LOCALVARNAME {, LOCALVARNAME}}
   end}

   {METHODCALL | return | STATEMENT}
end

destructor OBJECTNAME
  {var
    {TYPESPEC LOCALVARNAME {, LOCALVARNAME}}
   end}

   {METHODCALL | return | STATEMENT}
end

interface INTERFACENAME [implements OBJECTNAME]
  [inherits (INTERFACENAME | METHODNAME) {, (INTERFACENAME | METHODNAME)}]

  {method METHODSPEC METHODNAME '('
    [TYPESPEC PARAMNAME {, TYPESPEC PARAMNAME}] ')'}
end

method METHODSPEC INTERFACENAME '.' METHODNAME '('
  [TYPESPEC PARAMNAME {, TYPESPEC PARAMNAME}] ')'
  {var
    {TYPESPEC LOCALVARNAME {, LOCALVARNAME}}
  end}

  { METHODCALL | STATEMENT | return [EXPR]}
end

operator UNARYOP TYPESPEC
  {var
    {TYPESPEC LOCALVARNAME {, TYPESPEC LOCALVARNAME}}
  end}
  {STATEMENT}
end

operator TYPESPEC ASSIGNOPERATOR TYPESPEC
  {var
    {TYPESPEC LOCALVARNAME {, TYPESPEC LOCALVARNAME}}
  end}
  {STATEMENT}
end

operator TYPESPEC BINARYOPERATOR TYPESPEC
  {var
    {TYPESPEC LOCALVARNAME {, TYPESPEC LOCALVARNAME}}
  end}
  {STATEMENT}
end

run
  {var
    {TYPESPEC LOCALVARNAME {, LOCALVARNAME}}
  end}

  {STATEMENT}
end

========== statements ===============

LABELNAME:

goto LABELNAME

exit '(' EXPR ')'

bind '(' OBJECTVAR, (INTERFACENAME | METHODNAME)
  {, (INTERFACENAME | METHODNAME)} ')'

if CONDITION
  then STATEMENT

if CONDITION
  {STATEMENT}
elseif CONDITION
  {STATEMENT}
else
  {STATEMENT}
endif

case EXPR
[precase
  {exitpre | STATEMENT}
endpre]

[postcase
  {exitpost | STATEMENT}
endpost]

[in '[' CONSTEXPR .. CONSTEXPR ']'
  {exitcase | nextcase | STATEMENT}]

[of CONSTEXPR
  {exitcase | nextcase | STATEMENT}]

[default
  {STATEMENT}]
end

[IDENT:]for IDENT = EXPR (to | downto) EXPR
  {STATEMENT |
  break [IDENT] |
  next [IDENT]}
endfor

[IDENT:]foreach IDENT in '[' [EXPR {, EXPR}] ']'
  {STATEMENT |
  break [IDENT] |
  next [IDENT]}
endfor

[IDENT:]repeat
  {STATEMENT |
  break [IDENT] |
  next [IDENT]}
when CONDITION

[IDENT:]while CONDITION
  {STATEMENT |
  break [IDENT] |
  next [IDENT]}
endwhile

============ tokens =================

IDENT = _a-zA-Z{_a-zA-Z0-9}

STRING = '..' | ".."

BASETYPE = int[:bits] | uint[:bits] |
  char | string | bool |
  file | ufsize | usize

SIMPLETYPE = [@] (TYPENAME | BASETYPE) ['[' CONSTEXPR ']']

FUNCSPEC = { [CALLSPECNAME] | [SIMPLETYPE] }

TYPESPEC =
  SIMPLETYPE |
  func {[CALLSPECNAME] | [SIMPLETYPE]} '('
    [TYPESPEC PARAMNAME {, TYPESPEC PARAMNAME}] ')'
